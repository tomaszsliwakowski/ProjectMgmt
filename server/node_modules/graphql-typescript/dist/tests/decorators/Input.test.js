"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const storage_1 = require("../../src/storage");
describe('@Input', () => {
    it('sets literal of target', () => {
        let A = class A {
        };
        A = __decorate([
            src_1.Input
        ], A);
        const literal = storage_1.getTypeMetadata(A.prototype).getLiteral();
        expect(literal).toMatch(/input A \{(.|\n)*\}/);
    });
    it('sets literal of target with a property field', () => {
        let A = class A {
        };
        __decorate([
            src_1.Field(() => src_1.String),
            __metadata("design:type", String)
        ], A.prototype, "hello", void 0);
        A = __decorate([
            src_1.Input
        ], A);
        const literal = storage_1.getTypeMetadata(A.prototype).getLiteral();
        expect(literal).toMatch(/input A \{(.|\n)*hello: String!(.|\n)*\}/);
    });
    it('throws an error if target has a method field', () => {
        try {
            let A = class A {
                hello(_, _args) { }
            };
            __decorate([
                src_1.Field(() => src_1.String),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", [Object, String]),
                __metadata("design:returntype", void 0)
            ], A.prototype, "hello", null);
            A = __decorate([
                src_1.Input
            ], A);
            A;
        }
        catch (e) {
            expect(e.message).toBe('An Input must have only scalar type fields');
        }
    });
});
//# sourceMappingURL=Input.test.js.map