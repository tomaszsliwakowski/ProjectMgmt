"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const storage_1 = require("../../src/storage");
describe('@Field', () => {
    it(`adds a field to target if with a parameter`, () => {
        class A {
            hello() { return ''; }
        }
        __decorate([
            src_1.Field(() => src_1.String),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], A.prototype, "hello", null);
        const typeMetadata = storage_1.getTypeMetadata(A.prototype);
        const field = typeMetadata.fieldMetadataMap['hello'];
        expect(field).toHaveProperty('nullable', false);
        expect(field).toHaveProperty('isList', false);
        expect(field.typeFunc()).toBe(src_1.String);
        expect(field).toHaveProperty('isMutation', false);
    });
    it(`adds a field to target if with a array parameter`, () => {
        class A {
            hello() { return ''; }
        }
        __decorate([
            src_1.Field(() => [src_1.String]),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], A.prototype, "hello", null);
        const typeMetadata = storage_1.getTypeMetadata(A.prototype);
        const field = typeMetadata.fieldMetadataMap['hello'];
        expect(field).toHaveProperty('nullable', false);
        expect(field).toHaveProperty('isList', true);
        expect(field.typeFunc()).toHaveProperty('0', src_1.String);
        expect(field).toHaveProperty('isMutation', false);
    });
    it(`throws an error if with a wrong argument`, () => {
        try {
            class A {
                hello() { }
            }
            __decorate([
                src_1.Field({}),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", void 0)
            ], A.prototype, "hello", null);
            A;
        }
        catch (e) {
            expect(e.message).toBe(`A argument of @Field must be a function`);
        }
    });
});
//# sourceMappingURL=Field.test.js.map