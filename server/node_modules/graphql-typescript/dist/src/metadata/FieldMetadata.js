"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FieldMetadata {
    constructor(name, typeFunc, argumentMetadata, descriptor, options = { isMutation: false }) {
        this.setNullable = () => {
            this.nullable = true;
        };
        this.getLiteral = () => {
            const { isMutation, isList, typeFunc, nullable } = this;
            const literal = `${isMutation ? '\n    extend type Mutation {\n\t' : ''}${this.name}${this.argumentMetadata.getLiteral()}: ${isList ? `[${typeFunc()[0].name}]` : typeFunc().name}${nullable ? '' : '!'}${isMutation ? '\n    }' : ''}`;
            return literal;
        };
        if (typeof typeFunc !== 'function') {
            throw new Error(`A argument of @${options.isMutation ? 'Mutation' : 'Field'} must be a function`);
        }
        this.name = name;
        this.isList = Array.isArray(typeFunc());
        this.typeFunc = typeFunc;
        this.argumentMetadata = argumentMetadata,
            this.isMutation = options && options.isMutation || false;
        this.nullable = false;
        this.resolver = descriptor && descriptor.value;
    }
}
exports.FieldMetadata = FieldMetadata;
//# sourceMappingURL=FieldMetadata.js.map