"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const storage_1 = require("../../src/storage");
describe('@Type', () => {
    it('sets literal of target', () => {
        let A = class A {
        };
        A = __decorate([
            src_1.Type
        ], A);
        const literal = storage_1.getTypeMetadata(A.prototype).getLiteral();
        expect(literal).toMatch(/type A \{(.|\n)*\}/);
    });
    it('sets literal of target with a method field', () => {
        class Argument {
        }
        __decorate([
            src_1.Field(() => src_1.String),
            __metadata("design:type", String)
        ], Argument.prototype, "arg1", void 0);
        let A = class A {
            hello(_, _args) { }
        };
        __decorate([
            src_1.Field(() => src_1.String),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Argument]),
            __metadata("design:returntype", void 0)
        ], A.prototype, "hello", null);
        A = __decorate([
            src_1.Type
        ], A);
        const literal = storage_1.getTypeMetadata(A.prototype).getLiteral();
        expect(literal).toMatch(/type A \{(.|\n)*hello\(arg1: String!\): String!(.|\n)*\}/);
    });
    it('sets literal of target with mutation method', () => {
        class Argument {
        }
        __decorate([
            src_1.Field(() => src_1.String),
            __metadata("design:type", String)
        ], Argument.prototype, "arg1", void 0);
        let A = class A {
            hello(_, _args) { }
        };
        __decorate([
            src_1.Mutation(() => src_1.String),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Argument]),
            __metadata("design:returntype", void 0)
        ], A.prototype, "hello", null);
        A = __decorate([
            src_1.Type
        ], A);
        const literal = storage_1.getTypeMetadata(A.prototype).getLiteral();
        expect(literal).toMatch(/type A \{(.|\n)*\}/);
    });
});
//# sourceMappingURL=Type.test.js.map